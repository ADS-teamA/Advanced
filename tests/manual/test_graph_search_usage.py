#!/usr/bin/env python
"""
Test spr√°vn√©ho pou≈æit√≠ graph_search n√°stroje
"""
from dotenv import load_dotenv
load_dotenv()

from src.agent.tools.registry import get_registry
from src.agent.graph_adapter import GraphAdapter
from src.graph import Neo4jConfig
from src.hybrid_search import HybridVectorStore
from src.embedding_generator import EmbeddingGenerator
from pathlib import Path

print("=" * 70)
print("TEST: Spr√°vn√© pou≈æit√≠ graph_search")
print("=" * 70)

# Naƒçten√≠ komponent
vector_store = HybridVectorStore.load(Path("vector_db"))
embedder = EmbeddingGenerator()
neo4j_config = Neo4jConfig.from_env()
knowledge_graph = GraphAdapter.from_neo4j(neo4j_config)

registry = get_registry()
registry.initialize_tools(
    vector_store=vector_store,
    embedder=embedder,
    knowledge_graph=knowledge_graph,
)

graph_tool = registry.get_tool('graph_search')
browse_tool = registry.get_tool('browse_entities')

# ‚ùå ≈†PATNƒö: Bez entity_value
print("\n[1] ‚ùå ≈†PATN√â pou≈æit√≠ - bez entity_value:")
result = graph_tool.execute(
    mode="relationships",
    entity_type="regulation",
    relationship_types=["superseded_by"]
)
print(f"   V√Ωsledek: {result.success}")
if not result.success:
    print(f"   Chyba: {result.error[:100]}...")

# ‚úÖ SPR√ÅVNƒö: Nejd≈ô√≠v browse, pak graph_search pro ka≈ædou entitu
print("\n[2] ‚úÖ SPR√ÅVN√â pou≈æit√≠ - browse + graph_search:")

# Krok 1: Naj√≠t regulace
print("   Krok 1: browse_entities pro nalezen√≠ regulac√≠...")
browse_result = browse_tool.execute(entity_type="standard", limit=5)
print(f"   ‚úì Nalezeno {len(browse_result.data)} regulac√≠")

# Krok 2: Pro ka≈ædou regulaci zkontrolovat vztahy
print("\n   Krok 2: graph_search pro ka≈ædou regulaci...")
for entity in browse_result.data[:3]:
    result = graph_tool.execute(
        mode="relationships",
        entity_value=entity['value'],  # ‚úÖ KL√çƒåOV√ù PARAMETR!
        relationship_types=["superseded_by", "supersedes"],
        k=5
    )
    
    if result.success:
        rels = result.data.get("relationships", [])
        print(f"   ‚úì '{entity['value'][:50]}': {len(rels)} vztah≈Ø")
    else:
        print(f"   ‚ùå '{entity['value'][:50]}': chyba")

knowledge_graph.close()

print("\n" + "=" * 70)
print("‚úÖ TEST DOKONƒåEN")
print("\nüìù Z√ÅVƒöR:")
print("   graph_search V≈ΩDY vy≈æaduje entity_value parametr!")
print("   Pro bulk operace: browse_entities + smyƒçka p≈ôes graph_search")
print("=" * 70)
